import 'package:flutter/material.dart';
import 'dart:math' as math; // Để sử dụng cho icon Send xoay

void main() {
  runApp(MyApp());
}

// --- Mock Message Data Structure ---
class Message {
  final String text;
  final bool isMe; // True if the message is from the current user

  Message({required this.text, required this.isMe});
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        brightness: Brightness.dark,
        primarySwatch: Colors.blue, // Ít ảnh hưởng vì ta override nhiều
        scaffoldBackgroundColor: const Color(0xFF1F222A), // Nền chính
        hintColor: Colors.grey[500],
        fontFamily: 'Poppins', // Đảm bảo font đã được thêm
        appBarTheme: const AppBarTheme(
          backgroundColor: Color(0xFF1F222A), // Màu AppBar giống nền
          elevation: 0, // Bỏ shadow
          iconTheme: IconThemeData(color: Colors.white70),
        ),
        // Thêm style cho TextField nếu muốn thống nhất
        inputDecorationTheme: InputDecorationTheme(
          filled: true,
          fillColor: const Color(0xFF2C2F37), // Màu nền ô input
          hintStyle: TextStyle(color: Colors.grey[500]),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(25.0), // Bo tròn nhiều
            borderSide: BorderSide.none,
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(25.0),
            borderSide: BorderSide.none,
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(25.0),
            borderSide: BorderSide.none, // Bỏ viền khi focus
          ),
          contentPadding: const EdgeInsets.symmetric(vertical: 14.0, horizontal: 20.0),
        ),
      ),
      home: ChatPage(aiModelName: 'AI Assistant'), // Truyền tên model vào
    );
  }
}

class ChatPage extends StatefulWidget {
  final String aiModelName; // Nhận tên model từ trang trước

  const ChatPage({Key? key, required this.aiModelName}) : super(key: key);

  @override
  _ChatPageState createState() => _ChatPageState();
}

class _ChatPageState extends State<ChatPage> {
  final TextEditingController _controller = TextEditingController();
  final ScrollController _scrollController = ScrollController();

  // --- Mock Chat Messages ---
  final List<Message> _messages = [
    Message(text: 'Hello! How can I assist you today?', isMe: false),
    Message(text: 'Can you help me with my project?', isMe: true),
    Message(
        text:
            'Of course! Please tell me more about your project and what specific help you need.',
        isMe: false),
     // Thêm tin nhắn khác để test scroll
     Message(text: 'I need help designing the user interface.', isMe: true),
     Message(text: 'Okay, I can help with that. What style are you aiming for?', isMe: false),
     Message(text: 'Something modern and clean, like the image I showed you.', isMe: true),
     Message(text: 'Got it. Let\'s start brainstorming some ideas.', isMe: false),
     Message(text: 'Great!', isMe: true),

  ];

  @override
  void initState() {
    super.initState();
    // Tùy chọn: Cuộn xuống cuối khi màn hình được tải lần đầu
    // WidgetsBinding.instance.addPostFrameCallback((_) {
    //   _scrollToBottom();
    // });
  }

  @override
  void dispose() {
    _controller.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  void _sendMessage() {
    final text = _controller.text.trim();
    if (text.isNotEmpty) {
      setState(() {
        _messages.insert(0, Message(text: text, isMe: true)); // Thêm vào đầu list vì reverse=true
        // TODO: Gửi tin nhắn đến AI và nhận phản hồi
        // Giả lập phản hồi từ AI sau một khoảng thời gian ngắn
        Future.delayed(const Duration(milliseconds: 500), () {
          setState(() {
             _messages.insert(0, Message(text: 'Okay, processing "$text"...', isMe: false));
          });
           _scrollToBottom(durationMillis: 100); // Cuộn nhẹ xuống khi có tin nhắn mới
        });

      });
      _controller.clear();
      _scrollToBottom(); // Cuộn xuống cuối sau khi gửi
    }
  }

  void _scrollToBottom({int durationMillis = 300}) {
    if (_scrollController.hasClients) {
      _scrollController.animateTo(
        0.0, // Cuộn đến vị trí đầu (vì reverse=true)
        duration: Duration(milliseconds: durationMillis),
        curve: Curves.easeOut,
      );
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: Row(
          children: [
            // --- AI Avatar ---
            CircleAvatar(
              radius: 18,
              // Thay bằng avatar thực tế hoặc placeholder
              backgroundImage: NetworkImage('https://via.placeholder.com/150/771796'), // Placeholder image
               backgroundColor: Colors.grey[700],
            ),
            const SizedBox(width: 10),
            // --- AI Name & Status ---
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  widget.aiModelName, // Sử dụng tên model được truyền vào
                  style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500, color: Colors.white),
                ),
                const SizedBox(height: 2),
                Text(
                  'Online', // Hoặc trạng thái khác (typing...)
                  style: TextStyle(fontSize: 12, color: Colors.greenAccent[400]), // Màu xanh lá cho online
                ),
              ],
            ),
          ],
        ),
        actions: [
          // --- Options Menu ---
          IconButton(
            icon: const Icon(Icons.more_vert),
            onPressed: () {
              // TODO: Show options menu
              print('Options menu tapped');
            },
          ),
        ],
      ),
      body: Column(
        children: [
          // --- Chat Messages Area ---
          Expanded(
            child: ListView.builder(
              controller: _scrollController,
              reverse: true, // Tin nhắn mới nhất ở dưới cùng
              padding: const EdgeInsets.symmetric(vertical: 10.0, horizontal: 10.0),
              itemCount: _messages.length,
              itemBuilder: (context, index) {
                final message = _messages[index];
                return MessageBubble(
                  message: message.text,
                  isMe: message.isMe,
                );
              },
            ),
          ),
          // --- Input Area ---
          _buildInputArea(),
        ],
      ),
    );
  }

  // --- Widget cho khu vực nhập liệu ---
  Widget _buildInputArea() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 8.0),
      decoration: BoxDecoration(
        color: Theme.of(context).scaffoldBackgroundColor, // Cùng màu nền
        // border: Border(top: BorderSide(color: Colors.grey[800]!, width: 0.5)), // Tùy chọn: đường kẻ mờ
      ),
      child: SafeArea( // Đảm bảo không bị che bởi bottom navigation/gestures
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // --- Text Input Field ---
            Expanded(
              child: TextField(
                controller: _controller,
                style: const TextStyle(color: Colors.white, fontSize: 15),
                decoration: const InputDecoration(
                  hintText: 'Message',
                  // Styles được định nghĩa trong theme -> InputDecorationTheme
                ),
                textCapitalization: TextCapitalization.sentences,
                maxLines: null, // Cho phép nhiều dòng khi nhập dài
                // onChanged: (value) { setState(() {}); }, // Nếu muốn thay đổi nút mic/send dựa trên text
              ),
            ),
            const SizedBox(width: 8),

            // --- Microphone Button ---
            IconButton(
              icon: Icon(Icons.mic_none_outlined, color: Colors.grey[400]),
              iconSize: 26,
              onPressed: () {
                // TODO: Handle voice input
                print('Mic button tapped');
              },
            ),

            // --- Send Button ---
            IconButton(
              icon: Transform.rotate( // Xoay icon send một chút cho giống Telegram
                angle: -math.pi / 9,
                child: Icon(Icons.send, color: Colors.grey[400])
              ),
              iconSize: 24,
              onPressed: _sendMessage,
            ),
             const SizedBox(width: 4), // Khoảng cách nhỏ cuối cùng
          ],
        ),
      ),
    );
  }
}


// --- Custom Widget for Message Bubble ---
class MessageBubble extends StatelessWidget {
  final String message;
  final bool isMe;

  const MessageBubble({
    Key? key,
    required this.message,
    required this.isMe,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final radius = Radius.circular(16.0);
    final borderRadius = BorderRadius.only(
      topLeft: radius,
      topRight: radius,
      bottomLeft: isMe ? radius : Radius.zero, // Bo góc dưới trái nếu là user
      bottomRight: isMe ? Radius.zero : radius, // Bo góc dưới phải nếu là AI
    );

    return Align(
      // Căn chỉnh bubble sang trái hoặc phải
      alignment: isMe ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        constraints: BoxConstraints(
          // Giới hạn chiều rộng của bubble
          maxWidth: MediaQuery.of(context).size.width * 0.75,
        ),
        margin: const EdgeInsets.symmetric(vertical: 4.0, horizontal: 8.0),
        padding: const EdgeInsets.symmetric(vertical: 10.0, horizontal: 14.0),
        decoration: BoxDecoration(
          // Màu nền bubble - ở đây dùng chung 1 màu, bạn có thể đổi màu cho isMe=true
          color: const Color(0xFF2C2F37),
          borderRadius: borderRadius,
        ),
        child: Text(
          message,
          style: const TextStyle(color: Colors.white, fontSize: 15.0, height: 1.3),
        ),
      ),
    );
  }
}